
TABLE OF CONTENTS
1.Backbone Structure
2.Damage formula
3.Psuedocode



————————————————————————BACKBONE STRUCTURE————————————————————————————

*NOTE: Player and Enemy use the same struct but we can typedef different names

Player struct components:
-NAME
-DEAD

-HP
-HP_LOST
-ATK
-MATK
-DEF
-MDEF

-MOVE1_ID
-MOVE2_ID
-MOVE3_ID
-MOVE4_ID

-MOVE_NAME
_MOVE_ELEMENT
-TYPE (either magical or physical)

//Statuses
-DOT
-DOT_TURN
-STUN
-STUN_TURN
-others

//Debuffs
-ATKDEB
-ATKDEB_TURN
-MATKDEB
-MATKDEB_TURN
-DEFDEB
-DEFDEB_TURN
-MDEFDEB
-MDEFDEB_TURN

//Buffs
-ATKBUFF
-ATKBUFF_TURN
-MATKBUFF
-MATKBUFF_TURN
-DEFBUFF
-DEFBUFF_TURN
-MDEFBUFF
-MDEFBUFF_TURN

(USED BY ENEMY ONLY)
-ENEMY_ID
-MOVE5_ID
-MOVE6_ID
-MOVE7_ID
-SPD
-ELEMENT

(USED BY PLAYERS ONLY)
-CLASS_ID 

————————————————————————————DAMAGE FORMULA——————————————————————————————————

Physical attacks: (ATK * ATKBUFF * ATKDEB * MULTIPLIER)^2 / (DEF * DEFBUFF * DEFDEB)
Magical attacks: (MATK * MATKBUFF * MATKDEB * MULTIPLIER * ELEMENT)^2 / (MDEF * MDEFBUFF * MDEFDEB)

Player stats:
HP: 3000-8000
ATK: 0-800
MATK: 0-800
DEF: 200-500
MDEF: 200-500

Enemy stats:
HP: 10-1000000
ATK: 0-1000 (2000 will OTK a player with mac HP and DEF)
DEF: <1000000
MATK: 0-1000
MDEF: <1000000

————————————————————————————————PSUEDOCODE——————————————————————————————————

//method returns a pre-made monster based on the ID you feed it
Enemy getMonster(int ID){
	Enemy a;

	if (ID == 1){
		//set struct components here
	}
	if (ID == 2){
		
	}
	;;;;;;;;;;;;;;;
	return a;
}

//Dungeon system? Not sure how to do this with networking
int dungeons(Player party[]){
	dungeonID = 1;
	int easy[10] = {ID of monsters x 10}
	int medium[10] = {ID of monsters x 10}
	int hard[10] = {ID of monsters x 10}

	int level = 0;
	while (dungeonID == 1){
		if (!fight(party,easy[level])) level++;
		else if (level == 10) dungeon++;
		else level = 0;
	}
	//dungeon 2
	//dungeon 3
}


int fight(Player party[], enemy horde[]){
	get the SPD for each enemy
	enemies will go every SPD turns
	Ex: if an enemy has SPD = 3, then 3 players will attack before enemy attacks

	*processes commands
	Ex: use 1 2
	process(Player, party[],horde[], 1, 2);

	fights until everyone is party or horde is DEAD
	returns int based on failure or success
}


int process(Player player, Player party[], Enemy horde[], int move, int target){
	check what type is move
	if single target healing/buffing:
		attack(player, party[target], move);
	if party healing/buffing:
		loop through party and apply single heal to all;
	if single target attack/debuffing:
		attack(player, horde[target], move);
	if AOE:
		loop through party and apply single target damage to all;
}
		 








































